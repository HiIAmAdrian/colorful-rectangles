{"ast":null,"code":"import { randomIntFromInterval } from './helper';\nlet lastId = 0;\nexport default function reducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const today = new Date();\n  const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n\n  if (action.type === 'inserted') {\n    return [...state, {\n      id: lastId,\n      number: lastId++,\n      R: action.payload.R,\n      G: action.payload.G,\n      B: action.payload.B,\n      creationTime: time\n    }];\n  } else if (action.type === \"insertedRandom\") {\n    return [...state, {\n      id: lastId,\n      number: lastId++,\n      R: randomIntFromInterval(0, 255),\n      G: randomIntFromInterval(0, 255),\n      B: randomIntFromInterval(0, 255),\n      creation\n    }];\n  } else if (action.type === 'modified') {\n    return state.map(box => box.id !== action.payload.id ? box : { ...box,\n      R: action.payload.R,\n      G: action.payload.G,\n      B: action.payload.B\n    });\n  }\n\n  return state;\n}","map":{"version":3,"sources":["C:/Users/Work/Desktop/ADM FrontEnd/colorful-rectangles/src/reducer.tsx"],"names":["randomIntFromInterval","lastId","reducer","state","action","today","Date","time","getHours","getMinutes","getSeconds","type","id","number","R","payload","G","B","creationTime","creation","map","box"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,UAAtC;AAEA,IAAIC,MAAc,GAAG,CAArB;AAoBA,eAAe,SAASC,OAAT,GAAyD;AAAA,MAAxCC,KAAwC,uEAApB,EAAoB;AAAA,MAAhBC,MAAgB;AACpE,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,QAAMC,IAAI,GAAGF,KAAK,CAACG,QAAN,KAAmB,GAAnB,GAAyBH,KAAK,CAACI,UAAN,EAAzB,GAA8C,GAA9C,GAAoDJ,KAAK,CAACK,UAAN,EAAjE;;AACA,MAAIN,MAAM,CAACO,IAAP,KAAgB,UAApB,EACA;AACI,WAAO,CAAC,GAAGR,KAAJ,EACP;AACIS,MAAAA,EAAE,EAAEX,MADR;AAEIY,MAAAA,MAAM,EAAEZ,MAAM,EAFlB;AAGIa,MAAAA,CAAC,EAAEV,MAAM,CAACW,OAAP,CAAeD,CAHtB;AAIIE,MAAAA,CAAC,EAAEZ,MAAM,CAACW,OAAP,CAAeC,CAJtB;AAKIC,MAAAA,CAAC,EAAEb,MAAM,CAACW,OAAP,CAAeE,CALtB;AAMIC,MAAAA,YAAY,EAAEX;AANlB,KADO,CAAP;AASH,GAXD,MAYK,IAAIH,MAAM,CAACO,IAAP,KAAgB,gBAApB,EACL;AACI,WAAO,CAAC,GAAGR,KAAJ,EACH;AACIS,MAAAA,EAAE,EAAEX,MADR;AAEIY,MAAAA,MAAM,EAAEZ,MAAM,EAFlB;AAGIa,MAAAA,CAAC,EAAEd,qBAAqB,CAAC,CAAD,EAAI,GAAJ,CAH5B;AAIIgB,MAAAA,CAAC,EAAEhB,qBAAqB,CAAC,CAAD,EAAI,GAAJ,CAJ5B;AAKIiB,MAAAA,CAAC,EAAEjB,qBAAqB,CAAC,CAAD,EAAI,GAAJ,CAL5B;AAMImB,MAAAA;AANJ,KADG,CAAP;AASH,GAXI,MAYA,IAAIf,MAAM,CAACO,IAAP,KAAgB,UAApB,EACL;AACI,WAAOR,KAAK,CAACiB,GAAN,CAAUC,GAAG,IAAIA,GAAG,CAACT,EAAJ,KAAWR,MAAM,CAACW,OAAP,CAAeH,EAA1B,GAA+BS,GAA/B,GAAqC,EAAC,GAAGA,GAAJ;AACzDP,MAAAA,CAAC,EAAEV,MAAM,CAACW,OAAP,CAAeD,CADuC;AAEzDE,MAAAA,CAAC,EAAEZ,MAAM,CAACW,OAAP,CAAeC,CAFuC;AAGzDC,MAAAA,CAAC,EAAEb,MAAM,CAACW,OAAP,CAAeE;AAHuC,KAAtD,CAAP;AAKH;;AAED,SAAOd,KAAP;AACH","sourcesContent":["import { randomIntFromInterval } from './helper';\r\n\r\nlet lastId: number = 0;\r\n\r\ninterface Action{\r\n    type: string,\r\n    payload: {\r\n        id: number,\r\n        R: number,\r\n        G: number,\r\n        B: number\r\n    }\r\n}\r\n\r\ninterface Box{\r\n    id: number,\r\n    number: number,\r\n    R: number,\r\n    G: number,\r\n    B: number\r\n}\r\n\r\nexport default function reducer(state: Array<Box> = [], action: Action) {\r\n    const today = new Date();\r\n    const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n    if (action.type === 'inserted')\r\n    {\r\n        return [...state,\r\n        {\r\n            id: lastId,\r\n            number: lastId++,\r\n            R: action.payload.R,\r\n            G: action.payload.G,\r\n            B: action.payload.B,\r\n            creationTime: time\r\n        }];\r\n    }\r\n    else if (action.type === \"insertedRandom\")\r\n    {\r\n        return [...state,\r\n            {\r\n                id: lastId,\r\n                number: lastId++,\r\n                R: randomIntFromInterval(0, 255),\r\n                G: randomIntFromInterval(0, 255),\r\n                B: randomIntFromInterval(0, 255),\r\n                creation\r\n            }];\r\n    }\r\n    else if (action.type === 'modified')\r\n    {\r\n        return state.map(box => box.id !== action.payload.id ? box : {...box, \r\n            R: action.payload.R,\r\n            G: action.payload.G,\r\n            B: action.payload.B\r\n        });\r\n    }\r\n\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}