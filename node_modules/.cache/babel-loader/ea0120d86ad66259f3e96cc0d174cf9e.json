{"ast":null,"code":"export function determineFinished(board) {\n  const sortedLine = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  return board.filter(line => line.sort() === sortedLine).length === 9;\n}\nexport function randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nexport function fillBoard(strBoard) {\n  strBoard = strBoard.split('');\n  let board = Array(9).fill().map(() => Array(9).fill());\n  let index = 0;\n\n  for (let i = 0; i < 9; i++) for (let j = 0; j < 9; j++) board[i][j] = strBoard[index++];\n\n  return board;\n}\nexport function secondsToTime(secs) {\n  let divisorForMinutes = secs % (60 * 60);\n  let minutes = Math.floor(divisorForMinutes / 60);\n  let divisorForSeconds = divisorForMinutes % 60;\n  let seconds = Math.ceil(divisorForSeconds);\n  return `0${minutes}:${seconds < 10 ? '0' + seconds : seconds}`;\n}\nexport function transformBoardToStr(board) {\n  let strBoard = '';\n\n  for (let i = 0; i < 9; i++) for (let j = 0; j < 9; j++) strBoard = strBoard.concat(board[i][j]);\n\n  return strBoard;\n}","map":{"version":3,"sources":["C:/Users/Astan7/Desktop/ADM FrontEnd Projects/test/src/helper.js"],"names":["determineFinished","board","sortedLine","filter","line","sort","length","randomIntFromInterval","min","max","Math","floor","random","fillBoard","strBoard","split","Array","fill","map","index","i","j","secondsToTime","secs","divisorForMinutes","minutes","divisorForSeconds","seconds","ceil","transformBoardToStr","concat"],"mappings":"AAAA,OAAO,SAASA,iBAAT,CAA2BC,KAA3B,EAAkC;AACvC,QAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAnB;AACA,SAAOD,KAAK,CAACE,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,IAAL,OAAgBH,UAArC,EAAiDI,MAAjD,KAA4D,CAAnE;AACD;AAED,OAAO,SAASC,qBAAT,CAA+BC,GAA/B,EAAoCC,GAApC,EAAyC;AAC9C,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD;AAED,OAAO,SAASK,SAAT,CAAmBC,QAAnB,EAA6B;AAClCA,EAAAA,QAAQ,GAAGA,QAAQ,CAACC,KAAT,CAAe,EAAf,CAAX;AACA,MAAId,KAAK,GAAGe,KAAK,CAAC,CAAD,CAAL,CACTC,IADS,GAETC,GAFS,CAEL,MAAMF,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,EAFD,CAAZ;AAGA,MAAIE,KAAK,GAAG,CAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EACE,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4BpB,KAAK,CAACmB,CAAD,CAAL,CAASC,CAAT,IAAcP,QAAQ,CAACK,KAAK,EAAN,CAAtB;;AAE9B,SAAOlB,KAAP;AACD;AAED,OAAO,SAASqB,aAAT,CAAuBC,IAAvB,EAA4B;AAEjC,MAAIC,iBAAiB,GAAGD,IAAI,IAAI,KAAK,EAAT,CAA5B;AACA,MAAIE,OAAO,GAAGf,IAAI,CAACC,KAAL,CAAWa,iBAAiB,GAAG,EAA/B,CAAd;AAEA,MAAIE,iBAAiB,GAAGF,iBAAiB,GAAG,EAA5C;AACA,MAAIG,OAAO,GAAGjB,IAAI,CAACkB,IAAL,CAAUF,iBAAV,CAAd;AAEA,SAAQ,IAAGD,OAAQ,IAAGE,OAAO,GAAG,EAAV,GAAe,MAAMA,OAArB,GAA8BA,OAAQ,EAA5D;AACD;AAED,OAAO,SAASE,mBAAT,CAA6B5B,KAA7B,EAAoC;AACzC,MAAIa,QAAQ,GAAG,EAAf;;AAEA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EACE,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4BP,QAAQ,GAAGA,QAAQ,CAACgB,MAAT,CAAgB7B,KAAK,CAACmB,CAAD,CAAL,CAASC,CAAT,CAAhB,CAAX;;AAE9B,SAAOP,QAAP;AACD","sourcesContent":["export function determineFinished(board) {\r\n  const sortedLine = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n  return board.filter(line => line.sort() === sortedLine).length === 9;\r\n}\r\n\r\nexport function randomIntFromInterval(min, max) { \r\n  return Math.floor(Math.random() * (max - min + 1) + min)\r\n}\r\n\r\nexport function fillBoard(strBoard) {\r\n  strBoard = strBoard.split('');\r\n  let board = Array(9)\r\n    .fill()\r\n    .map(() => Array(9).fill());\r\n  let index = 0;\r\n  for (let i = 0; i < 9; i++)\r\n    for (let j = 0; j < 9; j++) board[i][j] = strBoard[index++];\r\n\r\n  return board;\r\n}\r\n\r\nexport function secondsToTime(secs){\r\n\r\n  let divisorForMinutes = secs % (60 * 60);\r\n  let minutes = Math.floor(divisorForMinutes / 60);\r\n\r\n  let divisorForSeconds = divisorForMinutes % 60;\r\n  let seconds = Math.ceil(divisorForSeconds);\r\n\r\n  return `0${minutes}:${seconds < 10 ? '0' + seconds: seconds}`;\r\n}\r\n\r\nexport function transformBoardToStr(board) {\r\n  let strBoard = '';\r\n\r\n  for (let i = 0; i < 9; i++)\r\n    for (let j = 0; j < 9; j++) strBoard = strBoard.concat(board[i][j]);\r\n\r\n  return strBoard;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}